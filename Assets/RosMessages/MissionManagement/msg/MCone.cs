//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.MissionManagement
{
    public class MCone : Message
    {
        public const string RosMessageName = "mission_management/Cone";

        //  Position on the x axis
        public double x;
        //  Position on the y axis
        public double y;
        //  Probability for the cone to be blue
        public double probability_blue;
        //  Probability for the cone to be yellow
        public double probability_yellow;
        //  Probability for the cone to be orange
        public double probability_orange;
        //  Probability for the cone to be a different color
        public double probability_other;

        public MCone()
        {
            this.x = 0.0;
            this.y = 0.0;
            this.probability_blue = 0.0;
            this.probability_yellow = 0.0;
            this.probability_orange = 0.0;
            this.probability_other = 0.0;
        }

        public MCone(double x, double y, double probability_blue, double probability_yellow, double probability_orange, double probability_other)
        {
            this.x = x;
            this.y = y;
            this.probability_blue = probability_blue;
            this.probability_yellow = probability_yellow;
            this.probability_orange = probability_orange;
            this.probability_other = probability_other;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.x));
            listOfSerializations.Add(BitConverter.GetBytes(this.y));
            listOfSerializations.Add(BitConverter.GetBytes(this.probability_blue));
            listOfSerializations.Add(BitConverter.GetBytes(this.probability_yellow));
            listOfSerializations.Add(BitConverter.GetBytes(this.probability_orange));
            listOfSerializations.Add(BitConverter.GetBytes(this.probability_other));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.x = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.y = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.probability_blue = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.probability_yellow = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.probability_orange = BitConverter.ToDouble(data, offset);
            offset += 8;
            this.probability_other = BitConverter.ToDouble(data, offset);
            offset += 8;

            return offset;
        }

        public override string ToString()
        {
            return "MCone: " +
            "\nx: " + x.ToString() +
            "\ny: " + y.ToString() +
            "\nprobability_blue: " + probability_blue.ToString() +
            "\nprobability_yellow: " + probability_yellow.ToString() +
            "\nprobability_orange: " + probability_orange.ToString() +
            "\nprobability_other: " + probability_other.ToString();
        }
    }
}
