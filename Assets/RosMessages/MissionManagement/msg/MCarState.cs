//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.MissionManagement
{
    public class MCarState : Message
    {
        public const string RosMessageName = "mission_management/CarState";

        public MHeader header;
        //  State of the autonomous system
        public sbyte as_state;
        //  State od the emergency brake system
        public sbyte ebs_state;
        //  Autonomous mission id
        public sbyte ami_state;
        //  State of the steering system
        public bool steering_state;
        //  State of the service brake
        public sbyte service_brake_state;
        //  Velocity on the x-axis
        public float speed_actual_x;
        //  Velocity on the y-axis
        public float speed_actual_y;
        //  Velocity in direction of travel
        public float speed_actual;
        //  Rotation velocity around the yaw-axis
        public float yaw_rate;
        //  The accurate steering angle
        public float steering_angle_actual;
        //  The accurate percentage braking power
        public float brake_hydr_actual;
        //  The accurate torque
        public float motor_moment_actual;
        //  Longitudinal acceleration
        public float acceleration_longitudinal;
        //  Lateral acceleration
        public float acceleration_lateral;

        public MCarState()
        {
            this.header = new MHeader();
            this.as_state = 0;
            this.ebs_state = 0;
            this.ami_state = 0;
            this.steering_state = false;
            this.service_brake_state = 0;
            this.speed_actual_x = 0.0f;
            this.speed_actual_y = 0.0f;
            this.speed_actual = 0.0f;
            this.yaw_rate = 0.0f;
            this.steering_angle_actual = 0.0f;
            this.brake_hydr_actual = 0.0f;
            this.motor_moment_actual = 0.0f;
            this.acceleration_longitudinal = 0.0f;
            this.acceleration_lateral = 0.0f;
        }

        public MCarState(MHeader header, sbyte as_state, sbyte ebs_state, sbyte ami_state, bool steering_state, sbyte service_brake_state, float speed_actual_x, float speed_actual_y, float speed_actual, float yaw_rate, float steering_angle_actual, float brake_hydr_actual, float motor_moment_actual, float acceleration_longitudinal, float acceleration_lateral)
        {
            this.header = header;
            this.as_state = as_state;
            this.ebs_state = ebs_state;
            this.ami_state = ami_state;
            this.steering_state = steering_state;
            this.service_brake_state = service_brake_state;
            this.speed_actual_x = speed_actual_x;
            this.speed_actual_y = speed_actual_y;
            this.speed_actual = speed_actual;
            this.yaw_rate = yaw_rate;
            this.steering_angle_actual = steering_angle_actual;
            this.brake_hydr_actual = brake_hydr_actual;
            this.motor_moment_actual = motor_moment_actual;
            this.acceleration_longitudinal = acceleration_longitudinal;
            this.acceleration_lateral = acceleration_lateral;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(new[]{(byte)this.as_state});
            listOfSerializations.Add(new[]{(byte)this.ebs_state});
            listOfSerializations.Add(new[]{(byte)this.ami_state});
            listOfSerializations.Add(BitConverter.GetBytes(this.steering_state));
            listOfSerializations.Add(new[]{(byte)this.service_brake_state});
            listOfSerializations.Add(BitConverter.GetBytes(this.speed_actual_x));
            listOfSerializations.Add(BitConverter.GetBytes(this.speed_actual_y));
            listOfSerializations.Add(BitConverter.GetBytes(this.speed_actual));
            listOfSerializations.Add(BitConverter.GetBytes(this.yaw_rate));
            listOfSerializations.Add(BitConverter.GetBytes(this.steering_angle_actual));
            listOfSerializations.Add(BitConverter.GetBytes(this.brake_hydr_actual));
            listOfSerializations.Add(BitConverter.GetBytes(this.motor_moment_actual));
            listOfSerializations.Add(BitConverter.GetBytes(this.acceleration_longitudinal));
            listOfSerializations.Add(BitConverter.GetBytes(this.acceleration_lateral));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.as_state = (sbyte)data[offset];;
            offset += 1;
            this.ebs_state = (sbyte)data[offset];;
            offset += 1;
            this.ami_state = (sbyte)data[offset];;
            offset += 1;
            this.steering_state = BitConverter.ToBoolean(data, offset);
            offset += 1;
            this.service_brake_state = (sbyte)data[offset];;
            offset += 1;
            this.speed_actual_x = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.speed_actual_y = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.speed_actual = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.yaw_rate = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.steering_angle_actual = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.brake_hydr_actual = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.motor_moment_actual = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.acceleration_longitudinal = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.acceleration_lateral = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MCarState: " +
            "\nheader: " + header.ToString() +
            "\nas_state: " + as_state.ToString() +
            "\nebs_state: " + ebs_state.ToString() +
            "\nami_state: " + ami_state.ToString() +
            "\nsteering_state: " + steering_state.ToString() +
            "\nservice_brake_state: " + service_brake_state.ToString() +
            "\nspeed_actual_x: " + speed_actual_x.ToString() +
            "\nspeed_actual_y: " + speed_actual_y.ToString() +
            "\nspeed_actual: " + speed_actual.ToString() +
            "\nyaw_rate: " + yaw_rate.ToString() +
            "\nsteering_angle_actual: " + steering_angle_actual.ToString() +
            "\nbrake_hydr_actual: " + brake_hydr_actual.ToString() +
            "\nmotor_moment_actual: " + motor_moment_actual.ToString() +
            "\nacceleration_longitudinal: " + acceleration_longitudinal.ToString() +
            "\nacceleration_lateral: " + acceleration_lateral.ToString();
        }
    }
}
