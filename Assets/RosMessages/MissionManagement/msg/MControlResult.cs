//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.MissionManagement
{
    public class MControlResult : Message
    {
        public const string RosMessageName = "mission_management/ControlResult";

        public MHeader header;
        //  Target velocity in driving direction (km/h) unsigned
        public float speed_target;
        //  Target steering angle (Â°) signed
        public float steering_angle_target;
        //  Target braking pressure (%) unsigned
        public float brake_hydr_target;
        //  Target torque (%) signed
        public float motor_moment_target;
        //  Distance between current position and target point, needed for FSSIM
        public float length;
        //  Finished rounds
        public uint lap_counter;
        //  Currently perceived cones
        public uint cones_count_actual;
        //  Whole amount of recognized cones on the track
        public uint cones_count_all;

        public MControlResult()
        {
            this.header = new MHeader();
            this.speed_target = 0.0f;
            this.steering_angle_target = 0.0f;
            this.brake_hydr_target = 0.0f;
            this.motor_moment_target = 0.0f;
            this.length = 0.0f;
            this.lap_counter = 0;
            this.cones_count_actual = 0;
            this.cones_count_all = 0;
        }

        public MControlResult(MHeader header, float speed_target, float steering_angle_target, float brake_hydr_target, float motor_moment_target, float length, uint lap_counter, uint cones_count_actual, uint cones_count_all)
        {
            this.header = header;
            this.speed_target = speed_target;
            this.steering_angle_target = steering_angle_target;
            this.brake_hydr_target = brake_hydr_target;
            this.motor_moment_target = motor_moment_target;
            this.length = length;
            this.lap_counter = lap_counter;
            this.cones_count_actual = cones_count_actual;
            this.cones_count_all = cones_count_all;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(header.SerializationStatements());
            listOfSerializations.Add(BitConverter.GetBytes(this.speed_target));
            listOfSerializations.Add(BitConverter.GetBytes(this.steering_angle_target));
            listOfSerializations.Add(BitConverter.GetBytes(this.brake_hydr_target));
            listOfSerializations.Add(BitConverter.GetBytes(this.motor_moment_target));
            listOfSerializations.Add(BitConverter.GetBytes(this.length));
            listOfSerializations.Add(BitConverter.GetBytes(this.lap_counter));
            listOfSerializations.Add(BitConverter.GetBytes(this.cones_count_actual));
            listOfSerializations.Add(BitConverter.GetBytes(this.cones_count_all));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.header.Deserialize(data, offset);
            this.speed_target = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.steering_angle_target = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.brake_hydr_target = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.motor_moment_target = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.length = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.lap_counter = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.cones_count_actual = BitConverter.ToUInt32(data, offset);
            offset += 4;
            this.cones_count_all = BitConverter.ToUInt32(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MControlResult: " +
            "\nheader: " + header.ToString() +
            "\nspeed_target: " + speed_target.ToString() +
            "\nsteering_angle_target: " + steering_angle_target.ToString() +
            "\nbrake_hydr_target: " + brake_hydr_target.ToString() +
            "\nmotor_moment_target: " + motor_moment_target.ToString() +
            "\nlength: " + length.ToString() +
            "\nlap_counter: " + lap_counter.ToString() +
            "\ncones_count_actual: " + cones_count_actual.ToString() +
            "\ncones_count_all: " + cones_count_all.ToString();
        }
    }
}
